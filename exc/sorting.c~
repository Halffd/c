
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <unistd.h> // For sleep()
#include <pthread.h> // For sleep sort

#define TAMANHO 10
#define MAX_SLEEP_VAL 100 // Cap sleep values for sanity
#include <stdio.h>
#include <stdint.h>
#include <assert.h>
#include <stdlib.h>
#include <time.h>

// This could be controlled at runtime, would require an extra pass though.
#define MEMSORT_SIZE 0xffff

uint16_t *memsort_buf[MEMSORT_SIZE];

#define N_NUMBERS 20000

static int numbers[N_NUMBERS];
static int sorted[N_NUMBERS];

// Sleep sort thread function
typedef struct {
    int val;
    int idx;
    int *result;
    int *counter;
    pthread_mutex_t *mutex;
} sleep_data;

void* sleep_sort_thread(void *arg) {
    sleep_data *data = (sleep_data*)arg;
    
    // Sleep proportional to value (scale down for demo purposes)
    usleep(data->val * 50000); // 50ms per unit of value
    
    // Critical section - update the result array
    pthread_mutex_lock(data->mutex);
    data->result[(*data->counter)++] = data->val;
    pthread_mutex_unlock(data->mutex);
    
    pthread_exit(NULL);
}
void memsort(int *in, size_t n, int *out)
{
 for (size_t i = 0; i < n; i++)
 {
 int num = in[i];
 assert(num < MEMSORT_SIZE);
 memsort_buf[num] += 1;
 }

 size_t pos = 0;

 for (size_t i = 0; i < MEMSORT_SIZE; i++)
 {
 while (memsort_buf[i]--)
 {
 out[pos++] = i;
 }
 }
}
void memsortTest()
{
 for (size_t i = 0; i < N_NUMBERS; i++)
 {
 numbers[i] = rand() % MEMSORT_SIZE;
 }

 clock_t t = clock();

 memsort(numbers, N_NUMBERS, sorted);

 t = clock() - t;

 for (size_t i = 0; i < N_NUMBERS; i++)
 {
 printf("%i\n", sorted[i]);
 }

 printf("\nThat took %f ms\n", t / (float) CLOCKS_PER_SEC * 1000.0);
}
// Heapify a subtree rooted at index i in array v of size n
void heapify(int *v, int n, int i, int print_steps) {
    int largest = i;      // Initialize largest as root
    int left = 2 * i + 1; // Left child
    int right = 2 * i + 2; // Right child
    int temp;
    
    // If left child is larger than root
    if (left < n) {
        if (print_steps) printf("Comparing v[%d]=%d with v[%d]=%d (left child)\n", largest, v[largest], left, v[left]);
        if (v[left] > v[largest])
            largest = left;
    }
    
    // If right child is larger than largest so far
    if (right < n) {
        if (print_steps) printf("Comparing v[%d]=%d with v[%d]=%d (right child)\n", largest, v[largest], right, v[right]);
        if (v[right] > v[largest])
            largest = right;
    }
    
    // If largest is not root
    if (largest != i) {
        if (print_steps) printf("Swapping v[%d]=%d and v[%d]=%d\n", i, v[i], largest, v[largest]);
        
        // Swap
        temp = v[i];
        v[i] = v[largest];
        v[largest] = temp;
        
        // Recursively heapify the affected sub-tree
        heapify(v, n, largest, print_steps);
    }
}

void heap_sort(int *v, int print_steps) {
    int n = TAMANHO;
    int i, temp;
    int swaps = 0;
    int comparisons = 0;
    
    printf("Initial array: ");
    for (int j = 0; j < n; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    if (print_steps) printf("Phase 1: Building max heap...\n");
    clock_t start = clock();
    
    // Build heap (rearrange array)
    for (i = n / 2 - 1; i >= 0; i--) {
        if (print_steps) printf("\nHeapifying subtree rooted at index %d:\n", i);
        heapify(v, n, i, print_steps);
        
        if (print_steps) {
            printf("Heap after heapify at index %d: ", i);
            for (int j = 0; j < n; j++) {
                printf("%d ", v[j]);
            }
            printf("\n");
        }
    }
    
    if (print_steps) {
        printf("\nMax heap built! Current array: ");
        for (int j = 0; j < n; j++) {
            printf("%d ", v[j]);
        }
        printf("\n\nPhase 2: Extracting elements from heap...\n");
    }
    
    // One by one extract an element from heap
    for (i = n - 1; i > 0; i--) {
        // Move current root to end
        if (print_steps) printf("\nMoving root (max element) v[0]=%d to position %d\n", v[0], i);
        temp = v[0];
        v[0] = v[i];
        v[i] = temp;
        swaps++;
        
        // Call max heapify on the reduced heap
        if (print_steps) printf("Heapifying reduced heap (size %d):\n", i);
        heapify(v, i, 0, print_steps);
        
        if (print_steps) {
            printf("Array after extraction %d: ", n - i);
            for (int j = 0; j < n; j++) {
                if (j == i) printf("| ");
                printf("%d ", v[j]);
            }
            printf("\n");
        }
    }
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    printf("\n----- FINAL STATS (HEAP SORT) -----\n");
    printf("Sorted array: ");
    for (int j = 0; j < n; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Time complexity: O(n log n) - guaranteed\n");
    printf("Space complexity: O(1) - in-place sorting\n");
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("----------------------\n\n");
}
void quicksort(int *v, int inicio, int fim, int print_steps) {
    int pivo, esq, dir, meio, aux;
    int comparisons = 0;
    int swaps = 0;
    
    // Base case - if partition has 1 or 0 elements
    if(inicio >= fim) return;
    
    // Choose pivot (middle element to avoid worst-case on sorted arrays)
    meio = (inicio + fim) / 2;
    pivo = v[meio];
    
    if(print_steps) {
        printf("Partitioning subarray: [");
        for(int i = inicio; i <= fim; i++) {
            printf("%d ", v[i]);
        }
        printf("]\n");
        printf("Pivot selected: v[%d]=%d\n", meio, pivo);
    }
    
    // Move pivot to beginning (traditional Lomuto scheme)
    v[meio] = v[inicio];
    v[inicio] = pivo;
    swaps++;
    
    // Partition process
    esq = inicio + 1;
    dir = fim;
    
    while(esq <= dir) {
        // Find element greater than pivot from left
        while(esq <= fim && v[esq] <= pivo) {
            comparisons++;
            if(print_steps) printf("Comparing v[%d]=%d with pivot %d: less or equal\n", esq, v[esq], pivo);
            esq++;
        }
        
        // Find element less than pivot from right
        while(dir > inicio && v[dir] > pivo) {
            comparisons++;
            if(print_steps) printf("Comparing v[%d]=%d with pivot %d: greater\n", dir, v[dir], pivo);
            dir--;
        }
        
        // Swap if pointers haven't crossed
        if(esq < dir) {
            if(print_steps) printf("Swapping v[%d]=%d and v[%d]=%d\n", esq, v[esq], dir, v[dir]);
            aux = v[esq];
            v[esq] = v[dir];
            v[dir] = aux;
            swaps++;
        }
    }
    
    // Put pivot in its final position
    if(print_steps) printf("Placing pivot %d at position %d\n", pivo, dir);
    v[inicio] = v[dir];
    v[dir] = pivo;
    swaps++;
    
    if(print_steps) {
        printf("After partition: [");
        for(int i = inicio; i <= fim; i++) {
            printf("%d ", v[i]);
            if(i == dir) printf("| ");
        }
        printf("]\n\n");
    }
    
    // Recursively sort subarrays
    quicksort(v, inicio, dir-1, print_steps);
    quicksort(v, dir+1, fim, print_steps);
}

void quick_sort(int *v, int print_steps) {
    int comparisons = 0;
    int swaps = 0;
    
    printf("Initial array: ");
    for(int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    clock_t start = clock();
    
    // Call recursive quicksort
    quicksort(v, 0, TAMANHO-1, print_steps);
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    printf("\n----- FINAL STATS (QUICK SORT) -----\n");
    printf("Sorted array: ");
    for(int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Time complexity: Average O(n log n), Worst O(nÂ²)\n");
    printf("Space complexity: O(log n) for recursion stack\n");
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("----------------------\n\n");
}
void merge(int *v, int *c, int i, int m, int f, int print_steps) {
    int z, iv = i, ic = m + 1;
    
    if (print_steps) {
        printf("Merging subarrays: [");
        for (int k = i; k <= m; k++) printf("%d ", v[k]);
        printf("] and [");
        for (int k = m+1; k <= f; k++) printf("%d ", v[k]);
        printf("]\n");
    }
    
    // Copy to auxiliary array
    for (z = i; z <= f; z++)
        c[z] = v[z];
    
    z = i;
    
    // Merge process - the actual sorting happens here!
    while (iv <= m && ic <= f) {
        if (print_steps) printf("Comparing c[%d]=%d and c[%d]=%d\n", iv, c[iv], ic, c[ic]);
        
        if (c[iv] <= c[ic]) {
            v[z] = c[iv];
            iv++;
            if (print_steps) printf("Taking left element: %d\n", v[z]);
        } else {
            v[z] = c[ic];
            ic++;
            if (print_steps) printf("Taking right element: %d\n", v[z]);
        }
        z++;
    }
    
    // Copy remaining elements from left subarray
    while (iv <= m) {
        v[z] = c[iv];
        if (print_steps) printf("Copying remaining left element: %d\n", c[iv]);
        z++;
        iv++;
    }
    
    // Copy remaining elements from right subarray
    while (ic <= f) {
        v[z] = c[ic];
        if (print_steps) printf("Copying remaining right element: %d\n", c[ic]);
        z++;
        ic++;
    }
    
    if (print_steps) {
        printf("After merge: [");
        for (int k = i; k <= f; k++) printf("%d ", v[k]);
        printf("]\n\n");
    }
}

void sort(int *v, int *c, int i, int f, int print_steps) {
    if (i >= f) return;
    
    int m = (i + f) / 2;
    
    if (print_steps) {
        printf("Dividing array [");
        for (int k = i; k <= f; k++) printf("%d ", v[k]);
        printf("] at midpoint %d\n", m);
    }
    
    // Recursively sort left and right halves
    sort(v, c, i, m, print_steps);
    sort(v, c, m + 1, f, print_steps);
    
    // If already sorted, skip merge (optimization)
    if (v[m] <= v[m + 1]) {
        if (print_steps) printf("Subarrays already ordered, skipping merge\n\n");
        return;
    }
    
    // Merge the sorted halves
    merge(v, c, i, m, f, print_steps);
}

void mergesort(int *v, int print_steps) {
    int comparisons = 0; // For stats (though harder to track in merge sort)
    
    printf("Initial array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    if (print_steps) printf("Beginning merge sort process...\n\n");
    
    // Allocate auxiliary array
    int *c = malloc(sizeof(int) * TAMANHO);
    if (c == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }
    
    clock_t start = clock();
    
    // Start the recursive sorting
    sort(v, c, 0, TAMANHO - 1, print_steps);
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    // Free auxiliary array
    free(c);
    
    printf("\n----- FINAL STATS (MERGE SORT) -----\n");
    printf("Sorted array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Time complexity: O(n log n)\n");
    printf("Space complexity: O(n) - requires auxiliary array\n");
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("----------------------\n\n");
}
void selecao(int *v, int print_steps) {
    int i, j, aux, minimo, pos_minimo;
    int comparisons = 0;
    int swaps = 0;
    
    printf("Initial array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    clock_t start = clock();
    
    for (i = 0; i < TAMANHO-1; i++) {
        minimo = v[i];
        pos_minimo = i;
        
        if (print_steps) printf("Finding minimum element starting from position %d...\n", i);
        
        for (j = i+1; j < TAMANHO; j++) {
            comparisons++;
            if (print_steps) printf("Comparing v[%d]=%d and v[%d]=%d\n", pos_minimo, minimo, j, v[j]);
            
            if (minimo > v[j]) {
                minimo = v[j];
                pos_minimo = j;
                if (print_steps) printf("New minimum found: v[%d]=%d\n", pos_minimo, minimo);
            }
        }
        
        if (pos_minimo != i) {
            aux = v[pos_minimo];
            v[pos_minimo] = v[i];
            v[i] = aux;
            swaps++;
            
            if (print_steps) {
                printf("SWAP! Placing minimum at position %d. Array now: ", i);
                for (int k = 0; k < TAMANHO; k++) {
                    printf("%d ", v[k]);
                }
                printf("\n");
            }
        } else if (print_steps) {
            printf("Minimum already in correct position!\n");
        }
        
        if (print_steps) {
            printf("\n--- End of selection pass %d ---\n", i+1);
            printf("Current array: ");
            for (int k = 0; k < TAMANHO; k++) {
                printf("%d ", v[k]);
            }
            printf("\n\n");
        }
    }
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    printf("\n----- FINAL STATS (SELECTION SORT) -----\n");
    printf("Sorted array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Total passes: %d\n", TAMANHO - 1);
    printf("Total comparisons: %d\n", comparisons);
    printf("Total swaps: %d\n", swaps);
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("----------------------\n\n");
}

void insertion(int *v, int print_steps) {
    // Your original insertion sort code
    // ...same as before...
}

void bolha(int *v, int print_steps) {
    // Your original bubble sort code
    // ...same as before...
}

// Helper function to check if array is sorted
int is_sorted(int *arr, int size) {
    for (int i = 0; i < size - 1; i++) {
        if (arr[i] > arr[i+1]) {
            return 0;
        }
    }
    return 1;
}

void bogosort(int *v, int print_steps) {
    int shuffles = 0;
    int max_shuffles = 100000; // Sanity limit
    int aux, j, k;
    
    printf("Initial array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    printf("WARNING: Bogo Sort might take a very long time...\n");
    printf("Limited to %d shuffle attempts for sanity\n\n", max_shuffles);
    
    clock_t start = clock();
    
    // Keep shuffling until sorted or max attempts reached
    while (!is_sorted(v, TAMANHO) && shuffles < max_shuffles) {
        shuffles++;
        
        // Fisher-Yates shuffle
        for (j = TAMANHO - 1; j > 0; j--) {
            k = rand() % (j + 1);
            aux = v[j];
            v[j] = v[k];
            v[k] = aux;
        }
        
        if (print_steps && shuffles % 1000 == 0) {
            printf("Shuffle attempt #%d: ", shuffles);
            for (int j = 0; j < TAMANHO; j++) {
                printf("%d ", v[j]);
            }
            printf("\n");
        }
    }
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    printf("\n----- FINAL STATS (BOGO SORT) -----\n");
    if (shuffles >= max_shuffles) {
        printf("GAVE UP after %d shuffle attempts!\n", max_shuffles);
    } else {
        printf("SUCCESS! Array sorted after %d shuffles.\n", shuffles);
    }
    
    printf("Sorted array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Shuffle attempts: %d\n", shuffles);
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("----------------------\n\n");
}

void stalin_sort(int *v, int print_steps) {
    int result[TAMANHO];
    int result_size = 0;
    int eliminated = 0;
    
    printf("Initial array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    clock_t start = clock();
    
    // First element always stays
    result[result_size++] = v[0];
    if (print_steps) printf("Starting with first element %d\n", v[0]);
    
    // Check each subsequent element
    for (int i = 1; i < TAMANHO; i++) {
        if (print_steps) printf("Checking element v[%d]=%d\n", i, v[i]);
        
        if (v[i] >= result[result_size-1]) {
            result[result_size++] = v[i];
            if (print_steps) printf("Element %d keeps its party membership!\n", v[i]);
        } else {
            eliminated++;
            if (print_steps) printf("Element %d has been ELIMINATED! Not obeying order!\n", v[i]);
        }
        
        if (print_steps) {
            printf("Current array after purge: ");
            for (int j = 0; j < result_size; j++) {
                printf("%d ", result[j]);
            }
            printf("\n\n");
        }
    }
    
    // Copy result back to original array
    for (int i = 0; i < result_size; i++) {
        v[i] = result[i];
    }
    
    // Fill remaining spots with -1 to show they're eliminated
    for (int i = result_size; i < TAMANHO; i++) {
        v[i] = -1; // Mark as eliminated
    }
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    printf("\n----- FINAL STATS (STALIN SORT) -----\n");
    printf("Final array (eliminated elements marked as -1): ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Elements that survived: %d\n", result_size);
    printf("Elements eliminated: %d\n", eliminated);
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("----------------------\n\n");
}

void sleep_sort(int *v, int print_steps) {
    pthread_t threads[TAMANHO];
    sleep_data thread_data[TAMANHO];
    int result[TAMANHO];
    int counter = 0;
    pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
    
    printf("Initial array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    printf("Starting Sleep Sort (this will take some time)...\n");
    
    // Cap values for reasonable sleep times
    int capped_values[TAMANHO];
    for (int i = 0; i < TAMANHO; i++) {
        capped_values[i] = v[i] > MAX_SLEEP_VAL ? MAX_SLEEP_VAL : v[i];
        if (v[i] != capped_values[i] && print_steps) {
            printf("Capped value %d to %d for reasonable sleep time\n", v[i], capped_values[i]);
        }
    }
    
    clock_t start = clock();
    
    // Create threads
    for (int i = 0; i < TAMANHO; i++) {
        thread_data[i].val = capped_values[i];
        thread_data[i].idx = i;
        thread_data[i].result = result;
        thread_data[i].counter = &counter;
        thread_data[i].mutex = &mutex;
        
        if (print_steps) printf("Creating thread for value %d\n", capped_values[i]);
        
        pthread_create(&threads[i], NULL, sleep_sort_thread, (void*)&thread_data[i]);
    }
    
    // Wait for all threads to complete
    for (int i = 0; i < TAMANHO; i++) {
        pthread_join(threads[i], NULL);
    }
    
    // Copy result back to original array
    for (int i = 0; i < TAMANHO; i++) {
        v[i] = result[i];
    }
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    printf("\n----- FINAL STATS (SLEEP SORT) -----\n");
    printf("Sorted array: ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("Note: Sleep Sort is probabilistic and may not always sort correctly!\n");
    printf("----------------------\n\n");
}
// Function to get the maximum value in array v[]
int getMax(int *v, int n) {
    int max = v[0];
    for (int i = 1; i < n; i++)
        if (v[i] > max)
            max = v[i];
    return max;
}

// A function to do counting sort of v[] according to
// the digit represented by exp.
void countSort(int *v, int n, int exp, int print_steps) {
    int output[n]; // output array
    int i, count[10] = {0};
    
    // Store count of occurrences in count[]
    for (i = 0; i < n; i++) {
        count[(v[i] / exp) % 10]++;
        if (print_steps) printf("Element %d has digit %d at position %d\n", 
                               v[i], (v[i] / exp) % 10, exp);
    }
    
    if (print_steps) {
        printf("Count array: ");
        for (i = 0; i < 10; i++)
            printf("%d ", count[i]);
        printf("\n");
    }
    
    // Change count[i] so that count[i] now contains actual
    // position of this digit in output[]
    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];
    
    if (print_steps) {
        printf("Cumulative count: ");
        for (i = 0; i < 10; i++)
            printf("%d ", count[i]);
        printf("\n");
    }
    
    // Build the output array
    for (i = n - 1; i >= 0; i--) {
        int digit = (v[i] / exp) % 10;
        int pos = count[digit] - 1;
        
        output[pos] = v[i];
        count[digit]--;
        
        if (print_steps) printf("Placing %d at position %d based on digit %d\n", 
                               v[i], pos, digit);
    }
    
    // Copy the output array to v[], so that v[] now
    // contains sorted numbers according to current digit
    for (i = 0; i < n; i++)
        v[i] = output[i];
    
    if (print_steps) {
        printf("Array after sorting by digit at position %d: ", exp);
        for (i = 0; i < n; i++)
            printf("%d ", v[i]);
        printf("\n\n");
    }
}

// The main function to that sorts v[] of size n using
// Radix Sort
void radix_sort(int *v, int print_steps) {
    int n = TAMANHO;
	clock_t start = clock(); // Add declaration here
    printf("Initial array: ");
    for (int j = 0; j < n; j++) {
        printf("%d ", v[j]);
    }
    printf("\n\n");
    
    // Handle negative numbers check
    int hasNegative = 0;
    for (int i = 0; i < n; i++) {
        if (v[i] < 0) {
            hasNegative = 1;
            break;
        }
    }
    
    if (hasNegative) {
        printf("WARNING: Basic Radix Sort works best with non-negative numbers.\n");
        printf("This implementation will convert negatives to positives for sorting,\n");
        printf("then restore the signs at the end.\n\n");
        
        // Convert negatives to positives for sorting
        int *negFlags = (int*)malloc(n * sizeof(int));
        for (int i = 0; i < n; i++) {
            negFlags[i] = (v[i] < 0) ? 1 : 0;
            v[i] = abs(v[i]);
        }
        
        // Find the maximum number to know number of digits
        int max = getMax(v, n);
        
        clock_t start = clock();
        
        if (print_steps) printf("Maximum value is %d\n\n", max);
        
        // Do counting sort for every digit
        for (int exp = 1; max / exp > 0; exp *= 10) {
            if (print_steps) printf("Sorting by digit at position %d:\n", exp);
            countSort(v, n, exp, print_steps);
        }
        
        // Restore signs
        for (int i = 0; i < n; i++) {
            if (negFlags[i]) {
                v[i] = -v[i];
            }
        }
        
        // Sort again with negatives in front
        int negCount = 0;
        for (int i = 0; i < n; i++) {
            if (v[i] < 0) negCount++;
        }
        
        int pos = 0, neg = 0;
        int *temp = (int*)malloc(n * sizeof(int));
        
        // Put negatives first (in descending order)
        for (int i = n-1; i >= 0; i--) {
            if (v[i] < 0) {
                temp[neg++] = v[i];
            }
        }
        
        // Then positives (in ascending order)
        for (int i = 0; i < n; i++) {
            if (v[i] >= 0) {
                temp[negCount + pos++] = v[i];
            }
        }
        
        // Copy back to original array
        for (int i = 0; i < n; i++) {
            v[i] = temp[i];
        }
        
        free(temp);
        free(negFlags);
    } else {
        // Find the maximum number to know number of digits
        int max = getMax(v, n);
        
        clock_t start = clock();
        
        if (print_steps) printf("Maximum value is %d\n\n", max);
        
        // Do counting sort for every digit
        for (int exp = 1; max / exp > 0; exp *= 10) {
            if (print_steps) printf("Sorting by digit at position %d:\n", exp);
            countSort(v, n, exp, print_steps);
        }
    }
    
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    
    printf("\n----- FINAL STATS (RADIX SORT) -----\n");
    printf("Sorted array: ");
    for (int j = 0; j < n; j++) {
        printf("%d ", v[j]);
    }
    printf("\n");
    printf("Time complexity: O(d * n) where d is number of digits\n");
    printf("Space complexity: O(n + k) where k is range of input\n");
    printf("Time spent: %.6f seconds\n", time_spent);
    printf("----------------------\n\n");
}
int main() {
    int sorted[TAMANHO] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int unsorted[TAMANHO] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    int half_sorted[TAMANHO] = {1, 2, 3, 4, 5, 10, 9, 8, 7, 6};
    
    int test_case[TAMANHO];
    int choice;
    
    srand(time(NULL)); // Initialize random seed
    
    printf("\n====== SORTING ALGORITHM COMPARISON ======\n");
    printf("1. Bubble Sort (O(nÂ²))\n");
    printf("2. Insertion Sort (O(nÂ²))\n");
    printf("3. Selection Sort (O(nÂ²))\n");
    printf("4. Bogo Sort (O(nÃn!) with high probability)\n");
    printf("5. Stalin Sort (O(n) - not actually sorting!)\n");
    printf("6. Sleep Sort (O(max value in array))\n");
    printf("7. Run ALL tests (grab some coffee!)\n");
    printf("8. Merge Sort (O(n log n))\n");
    printf("9. Counting Sort (O(n k))\n");
    printf("10. Quick Sort (O(n log n) average)\n");
    printf("11. Heap Sort (O(n log n) guaranteed)\n");
	printf("12. Radix Sort (O(d * n) where d is number of digits)\n");
    printf("Enter your choice (1-7): ");
    scanf("%d", &choice);
    
    // Generate a random array for testing
    printf("Generating random test array...\n");
    for (int i = 0; i < TAMANHO; i++) {
        test_case[i] = rand() % 100;
    }
    
    int print_steps = 1;
    printf("Show detailed steps? (1=yes, 0=no): ");
    scanf("%d", &print_steps);
    
    switch (choice) {
        case 1:
            bolha(test_case, print_steps);
            break;
            
        case 2:
            insertion(test_case, print_steps);
            break;
            
        case 3:
            selecao(test_case, print_steps);
            break;
            
        case 4:
            bogosort(test_case, print_steps);
            break;
            
        case 5:
            stalin_sort(test_case, print_steps);
            break;
            
        case 6:
            sleep_sort(test_case, print_steps);
            break;
            
        case 7:
            printf("\n=== RUNNING ALL SORTING ALGORITHMS ===\n");
            printf("\n----- EFFICIENT ALGORITHMS -----\n");
            
            // Make copies of the array for each algorithm
            int copy1[TAMANHO], copy2[TAMANHO], copy3[TAMANHO], 
                copy4[TAMANHO], copy5[TAMANHO], copy6[TAMANHO];
                
            memcpy(copy1, test_case, sizeof(test_case));
            memcpy(copy2, test_case, sizeof(test_case));
            memcpy(copy3, test_case, sizeof(test_case));
            memcpy(copy4, test_case, sizeof(test_case));
            memcpy(copy5, test_case, sizeof(test_case));
            memcpy(copy6, test_case, sizeof(test_case));
            
            // Run all algorithms
            printf("\n--- BUBBLE SORT ---\n");
            bolha(copy1, print_steps);
            
            printf("\n--- INSERTION SORT ---\n");
            insertion(copy2, print_steps);
            
            printf("\n--- SELECTION SORT ---\n");
            selecao(copy3, print_steps);
            
            printf("\n----- JOKE/INEFFICIENT ALGORITHMS -----\n");
            
            printf("\n--- BOGO SORT ---\n");
            bogosort(copy4, print_steps);
            
            printf("\n--- STALIN SORT ---\n");
            stalin_sort(copy5, print_steps);
            
            printf("\n--- SLEEP SORT ---\n");
            sleep_sort(copy6, print_steps);

            int copy7[TAMANHO];
            memcpy(copy7, test_case, sizeof(test_case));

            printf("\n--- MERGE SORT ---\n");
            mergesort(copy7, print_steps);

			printf("n--- QUICK SORT ---\n");
            mergesort(copy7, print_steps);
            printf("\n=== ALL SORTING ALGORITHMS COMPLETED ===\n");
            break;     
        case 8:
            mergesort(test_case, print_steps);
            break;
        case 9:
            memsortTest();
            break;
	    case 10:
			quick_sort(test_case, print_steps);
			break;
    	case 11:
			heap_sort(test_case, print_steps);
			break;
 
    	case 12:
			radix_sort(test_case, print_steps);
			break;
       default:
            printf("Invalid choice!\n");
    }
    
    return 0;
}
